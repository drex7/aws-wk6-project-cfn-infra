AWSTemplateFormatVersion: "2010-09-09"
Description: Stack template for networking related resources

Parameters:
  AppName: { Type: String }
  VpcCidr: { Type: String, Default: 10.0.0.0/16 }
  PrivateSubnetCidrs: { Type: CommaDelimitedList }
  PublicSubnetCidrs: { Type: CommaDelimitedList }
  ProjectTag: { Type: String }

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: lab
          Value: !Sub "${ProjectTag}"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: lab
          Value: !Sub "${ProjectTag}"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: [0, !Ref PublicSubnetCidrs]
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
        - Key: lab
          Value: !Sub "${ProjectTag}"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: [1, !Ref PublicSubnetCidrs]
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2
        - Key: lab
          Value: !Sub "${ProjectTag}"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: [0, !Ref PrivateSubnetCidrs]
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet1
        - Key: lab
          Value: !Sub "${ProjectTag}"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [1, !Ref PrivateSubnetCidrs]
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet2
        - Key: lab
          Value: !Sub "${ProjectTag}"

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
        - Key: lab
          Value: !Sub "${ProjectTag}"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable
        - Key: lab
          Value: !Sub "${ProjectTag}"

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # NAT Gateway
  # NatGatewayEIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc

  # NatGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatGatewayEIP.AllocationId
  #     SubnetId: !Ref PublicSubnet1
  #     Tags:
  #       - Key: Name
  #         Value: MyVPC-NAT
  #       - Key: lab
  #         Value: !Sub "${ProjectTag}"

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # NatGatewayId: !Ref NatGateway

  # Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS containers
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ContainerSG
        - Key: lab
          Value: !Sub "${ProjectTag}"

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Load balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSecurityGroup
        - Key: lab
          Value: !Sub "${ProjectTag}"

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS instances
      GroupName: rds-db-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ContainerSecurityGroup
          Description: Allows inbound traffic from ECS containers to RDS PostgreSQL
      VpcId: !Ref MyVPC

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC Endpoints
      GroupName: vpce-sg
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr

  # ======= VPC Endpoints ===============
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VPCid: !Ref MyVPC
      VpcEndpointType: Gateway
      RouteTableIds: [!Ref PrivateRouteTable]
      # PolicyDocument:
      #   Statement:
      #     [{ Action: "s3:*", Effect: Allow, Principal: "*", Resource: "*" }]

  ECRDockerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VPCid: !Ref MyVPC
      VpcEndpointType: Interface
      SecurityGroupIds: [!Ref VPCEndpointSecurityGroup]
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      PrivateDnsEnabled: true

  ECRAPIEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      VPCid: !Ref MyVPC
      SecurityGroupIds: [!Ref VPCEndpointSecurityGroup]
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      PrivateDnsEnabled: true

  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      VPCid: !Ref MyVPC
      SecurityGroupIds: [!Ref VPCEndpointSecurityGroup]
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      PrivateDnsEnabled: true

  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      VPCid: !Ref MyVPC
      SecurityGroupIds: [!Ref VPCEndpointSecurityGroup]
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      PrivateDnsEnabled: true

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcEndpointType: Interface
      VPCid: !Ref MyVPC
      SecurityGroupIds: [!Ref VPCEndpointSecurityGroup]
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      PrivateDnsEnabled: true

Outputs:
  VpcId: { Value: !Ref MyVPC }
  PublicSubnetIds:
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
  PrivateSubnetIds:
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
  PrivateRouteTableId: { Value: !Ref PrivateRouteTable }
  DBSecurityGroup: { Value: !Ref DBSecurityGroup }
  ALBSecurityGroup: { Value: !Ref ALBSecurityGroup }
