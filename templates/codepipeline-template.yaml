Description: "AWS CodePipeline for ECS Deployment"

Parameters:
  ECSAppName: { Type: String }
  ECRRepoName: { Type: String }
  ContainerName: { Type: String }
  ContainerPort: { Type: Number }
  TaskDefinitionArn: { Type: String }
  CodeDeployApplication: { Type: String }  
  ArtifactsBucketName: { Type: String }
  ECSClusterName: { Type: String }
  ECSServiceName: { Type: String }
  CodeDeployDeploymentGroupName: { Type: String }
  CodePipelineRoleArn: { Type: String }
  CodeBuildRoleArn: { Type: String }
  ECRDeployCodePipelineRoleArn: { Type: String }
  ECRDeployPipelineName: { Type: String }
  ConnectionArn: { Type: String }
  FullRepositoryId: { Type: String }
  BranchName: { Type: String }
  CodeConnectionsActionRoleArn: { Type: String }

Resources:
  BlueGreenDeploymentPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AppName}-deployment
      RoleArn: !Ref CodePipelineRoleArn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucketName
      Stages:
        - Name: Source
          Actions:
            - Name: ECR_Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: '1'
              Configuration:
                RepositoryName: !Ref ECRRepoName
                ImageTag: latest
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Build
          Actions:
          - Name: Update-Service-Count
            ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: '1'
            Configuration:
              ProjectName: !Ref ServiceUpdateBuilder
            InputArtifacts:
              - Name: SourceOutput
            OutputArtifacts:
              - Name: BuildOutput 
            RunOrder: 1
        - Name: ECSDeploy
          Actions:
            - Name: CodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApp
                DeploymentGroupName: !Ref CodeDeployDeploymentGroupName
                TaskDefinitionTemplateArtifact: DeployArtifact
                TaskDefinitionTemplatePath: imagedefinitions.json
                AppSpecTemplateArtifact: DeployArtifact
                AppSpecTemplatePath: appspec.yaml
              InputArtifacts:
                - Name: DeployArtifact
              RunOrder: 1

  ECRDeploymentPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref CodePipelineArtifactsBucket
        Type: S3
      ExecutionMode: QUEUED
      Name: !Ref ECRDeployPipelineName
      PipelineType: V2
      RoleArn: !Ref ECRDeployCodePipelineRoleArn
      Stages:
        - Name: Source
          Actions:
            - Name: CodeConnections
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Ref FullRepositoryId
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: SourceOutput
              RoleArn: !Ref CodeConnectionsActionRoleArn
              RunOrder: 1
          OnFailure:
            Result: RETRY
        - Name: Build_and_Deploy
          OnFailure:
            Result: ROLLBACK
          BeforeEntry:
            Conditions:
              - Result: FAIL
                Rules:
                  - Name: MyDeploymentWindowRule
                    RuleTypeId:
                      Category: Rule
                      Owner: AWS
                      Provider: DeploymentWindow
                      Version: "1"
                    Configuration:
                      Cron: "* * * * * ? *"
                      TimeZone: "PST"
          Actions:
            - Name: Docker_Build_Tag_and_Push
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName:
                  Fn::Join:
                    - "-"
                    - - SimpleDockerProject
                      - Fn::Select:
                          - 4
                          - Fn::Split:
                              - "-"
                              - Fn::Select:
                                  - 2
                                  - Fn::Split:
                                      - /
                                      - Ref: AWS::StackId
              InputArtifacts:
                - Name: SourceOutput
              RoleArn: !GetAtt CodeBuildActionRole.Arn
              RunOrder: 1
    DependsOn:
      - CodePipelineDefaultPolicy

  # CodeBuild Project to deploy image to ECR
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AppName}-service-updater
      ServiceRole: !Ref CodeBuildRoleArn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        EnvironmentVariables:
          - Name: ECS_CLUSTER
            Value: !Ref ECSClusterName
          - Name: ECS_SERVICE
            Value: !Ref ECSServiceName
          - Name: TASK_DEFINITION_FAMILY
            Value: !Sub ${AppName}-task
          - Name: CONTAINER_NAME
            Value: !Ref ContainerName
          - Name: CONTAINER_PORT
            Value: !Ref ContainerPort
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - echo Build started
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - echo Writing image definitions file...
                - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
                - echo Writing appspec.yaml...
                - |
                  cat << EOF > appspec.yaml
                  version: 0.0
                  Resources:
                    - TargetService:
                        Type: AWS::ECS::Service
                        Properties:
                          TaskDefinition: "${TASK_DEFINITION_ARN}"
                          LoadBalancerInfo:
                            ContainerName: "${CONTAINER_NAME}"
                            ContainerPort: ${CONTAINER_PORT}
                  EOF
                - echo Uploading artifacts to S3...
                - aws s3 cp imagedefinitions.json s3://$ARTIFACT_BUCKET/artifacts/$IMAGE_REPO_NAME/$IMAGE_TAG/imagedefinitions.json
                - aws s3 cp appspec.yaml s3://$ARTIFACT_BUCKET/artifacts/$IMAGE_REPO_NAME/$IMAGE_TAG/appspec.yaml
          artifacts:
            files:
              - imagedefinitions.json
              - appspec.yaml
      Cache:
        Type: NO_CACHE
      EnvironmentVariables:
        - Name: CONTAINER_NAME
          Value: !Ref ContainerName
        - Name: TASK_DEFINITION_ARN
          Value: !Ref TaskDefinitionArn
        - Name: CONTAINER_PORT
          Value: !Ref ContainerPort

Outputs:
  BlueGreenDeploymentPipelineName:
    Value: !Ref BlueGreenDeploymentPipeline