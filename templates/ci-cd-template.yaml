AWSTemplateFormatVersion: '2010-09-09'
Description: CICD stack with CodePipeline for building and deploying the web application

Parameters:
  ALBListenerArn: { Type: String }
  AppName: { Type: String }
  BlueTargetGroupName: { Type: String }
  BranchName: { Type: String }
  CodeBuildRoleArn: { Type: String }
  CodeDeployRoleArn: { Type: String }
  # CodeConnectionsActionRoleArn: { Type: String }
  CodePipelineRoleArn: { Type: String }
  ContainerName: { Type: String }
  ContainerPort: { Type: Number }
  ECRRepoArn: { Type: String }
  ECRRepoName: { Type: String }
  ECSAppName: { Type: String }
  ECSClusterName: { Type: String }
  ECSServiceName: { Type: String }
  EventBridgeRoleArn: { Type: String }
  FullRepositoryId: { Type: String }
  GreenTargetGroupName: { Type: String }
  PipelineArtifactBucketName: { Type: String }

Resources:
  # EventBridge Rule to detect new ECR image push events
  DetectNewECRImageEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: detect-new-ecr-image
      EventPattern:
        source: [ "aws.ecr"]
        detail-type: [ "ECR Image Action"]
        detail:
          action-type: [ "PUSH"]
          repository-name: [ !Ref ECRRepoArn ]
          result: [ "SUCCESS" ]
      Targets:
        - Arn: !Ref BlueGreenDeploymentPipeline
          Id: StartPipelineExecution
          RoleArn: !Ref EventBridgeRoleArn
          Id: DeployPipelineTarget
          InputTransformer:
            InputPathsMap:
              image-tag: $.detail.image-tag
              repository-name: $.detail.repository-name
            InputTemplate: |
              {
                "source": [
                  {
                    "s3": {
                      "bucket": "<Bucket>",
                      "key": "artifacts/<repository-name>/<image-tag>/imagedefinitions.json"
                    }
                  }
                ]
              }
            InputTemplateParameters:
              Bucket: !Ref PipelineArtifactBucketName
              # RepoName: !Ref ECRRepository
              # ImageTag: <imageTag>

  # CodeDeploy Application and Deployment Group for Blue/Green deployment
  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub "${AppName}CodeDeployApp"
      ComputePlatform: ECS

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: !Sub "${AppName}DeploymentGroup"
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !Ref CodeDeployRoleArn
      AutoRollbackConfiguration:
        Enabled: true
        Events: [DEPLOYMENT_FAILURE]
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 2
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !Ref GreenTargetGroupName
              - Name: !Ref BlueTargetGroupName
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListenerArn
      ECSServices:
        - ClusterName: !Ref ECSClusterName
          ServiceName: !Ref ECSServiceName

  # CodePipeline for Blue/Green deployment using CodeDeploy
  BlueGreenDeploymentPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AppName}-DeployPipeline
      RoleArn: !Ref CodePipelineRoleArn
      PipelineType: V2
      ExecutionMode: QUEUED
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucketName
      Stages:
        - Name: Source
          Actions:
            - Name: S3Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket: !Ref PipelineArtifactBucketName
                S3ObjectKey: !Sub "artifacts/${ECRRepoName}/latest/imagedefinitions.json"
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: DeployArtifact
              RunOrder: 1
        - Name: ECSDeploy
          Actions:
            - Name: CodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: "1"
              RunOrder: 1
              Configuration:
                ApplicationName: !Ref CodeDeployApp
                DeploymentGroupName: !Ref DeploymentGroup
                TaskDefinitionTemplateArtifact: DeployArtifact
                AppSpecTemplateArtifact: DeployArtifact
                Image1ContainerName: IMAGE1_NAME
                Image1ArtifactName: DeployArtifact
              InputArtifacts:
                - Name: DeployArtifact

  # CodePipeline for ECR deployment using CodeBuild
  BuildPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${ECSAppName}-ecr-deploy-pipeline
      ArtifactStore:
        Location: !Ref PipelineArtifactBucketName
        Type: S3
      ExecutionMode: QUEUED
      PipelineType: V2
      RoleArn: !Ref CodePipelineRoleArn
      Stages:
        - Name: Source
          Actions:
            - Name: CodeConnections
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Sub arn:${AWS::Partition}:codeconnections:${AWS::Region}:${AWS::AccountId}:connection/43066aab-299c-45ea-a754-bbc26be2696e
                FullRepositoryId: !Ref FullRepositoryId
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: SourceOutput
              # RoleArn: !Ref CodeConnectionsActionRoleArn
              RunOrder: 1
          OnFailure:
            Result: RETRY
        - Name: Build_and_Deploy
          OnFailure:
            Result: ROLLBACK
          Actions:
            - Name: Docker_Build_Tag_and_Push
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: ECRDeployProject
              InputArtifacts:
                - Name: SourceOutput
              RoleArn: !Ref CodeBuildRoleArn
              RunOrder: 1

  # CodeBuild Project to build & deploy image to ECR
  ECRDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-ECRBuildProject
      Description: Build and deploy Docker image to ECR
      ServiceRole: !Ref CodeBuildRoleArn
      SourceVersion: main
      Artifacts:
        Type: S3
        Location: !Ref PipelineArtifactBucketName
        Name: build-artifact
        NamespaceType: BUILD_ID
        Packaging: ZIP
      Environment:
        Type: LINUX_LAMBDA_CONTAINER
        ComputeType: BUILD_LAMBDA_1GB
        Image: aws/codebuild/amazonlinux-x86_64-lambda-standard:nodejs20
        EnvironmentVariables:
          - Name: ECS_CLUSTER
            Value: !Ref ECSClusterName
          - Name: ECS_SERVICE
            Value: !Ref ECSServiceName
          - Name: CONTAINER_NAME
            Value: !Ref ContainerName
          - Name: CONTAINER_PORT
            Value: !Ref ContainerPort
          - Name: IMAGE_NAME
            Value: !Sub ${ECSAppName}
          - Name: ECR_REPO_NAME
            Value: !Sub ${ECRRepoName}
          - Name: ARTIFACT_BUCKET
            Value: !Ref PipelineArtifactBucketName
          - Name: ECR_REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoName}"
      Source:
        Type: GITHUB
        Auth:
          Type: OAUTH
          Location: https://github.com/drex7/aws-wk6-project-cfn-infra
          GitCloneDepth: 1
      Cache:
        Type: NO_CACHE


Outputs:
  BlueGreenDeploymentPipelineArn: { Value: !GetAtt BlueGreenDeploymentPipeline.Arn }
  ECRDeployCodePipelineArn: { Value: !GetAtt BuildPipeline.Arn }
  ECRDeployProjectArn: { Value: !GetAtt ECRDeployProject.Arn }
