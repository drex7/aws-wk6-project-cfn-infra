AWSTemplateFormatVersion: '2010-09-09'
Description: Stack template for CI/CD related resources

Parameters:
  PipelineName:
    Type: String
    Description: The name of the CodePipeline to trigger

Resources:  
  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: MyAppBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref ECRRepository
          - Name: IMAGE_TAG
            Value: latest
          - Name: ARTIFACT_BUCKET
            Value: !Ref PipelineArtifactBucket
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - echo Build started
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - echo Writing image definitions file...
                - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
                - echo Writing appspec.yaml...
                - |
                  cat << EOF > appspec.yaml
                  version: 0.0
                  Resources:
                    - TargetService:
                        Type: AWS::ECS::Service
                        Properties:
                          TaskDefinition: "${TASK_DEFINITION_ARN}"
                          LoadBalancerInfo:
                            ContainerName: "${CONTAINER_NAME}"
                            ContainerPort: ${CONTAINER_PORT}
                  EOF
                - echo Uploading artifacts to S3...
                - aws s3 cp imagedefinitions.json s3://$ARTIFACT_BUCKET/imagedefinitions/$IMAGE_REPO_NAME/$IMAGE_TAG/imagedefinitions.json
                - aws s3 cp appspec.yaml s3://$ARTIFACT_BUCKET/appspec/$IMAGE_REPO_NAME/$IMAGE_TAG/appspec.yaml
          artifacts:
            files:
              - imagedefinitions.json
              - appspec.yaml
      Cache:
        Type: NO_CACHE
      EnvironmentVariables:
        - Name: CONTAINER_NAME
          Value: !Ref ContainerName
        - Name: TASK_DEFINITION_ARN
          Value: !Ref TaskDefinition
        - Name: CONTAINER_PORT
          Value: !Ref ContainerPort

  # Build CodePipeline (for building and pushing to ECR)
  BuildCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt BuildCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild EdgexceutionRole: !GetAtt CodeBuildRole.Arn
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1

  # CodePipeline Webhook for GitHub
  BuildCodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      Filters:
        - JsonPath: $.ref
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref BuildCodePipeline
      TargetAction: Source
      RegisterWithThirdParty: true
