AWSTemplateFormatVersion: "2010-09-09"
Description: Stack template for iam related resources

Parameters:
  AppName: { Type: String }
  ProjectTag: { Type: String }
  ECRRepoName: { Type: String }
  # PipelineArtifactBucketArn: { Type: String }

Resources:
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokePipeline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:pipeline/${AppName}-DeployPipeline

  # IAM Role for CodePipeline
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
            Condition: 
              StringEquals: 
                aws:SourceAccount: !Sub '${AWS::AccountId}'
      Policies:
        - PolicyName: !Sub ${AppName}-CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: "*"       
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:RegisterTaskDefinition
                Resource: "*"  
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: 
                  - !GetAtt CodeDeployRole.Arn
              - Effect: Allow
                Action:
                  - codeconnections:UseConnection
                Resource:
                  - !Sub arn:aws:codeconnections:${AWS::Region}:${AWS::AccountId}:connection/*
            
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-CodeDeployRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codedeploy.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  # IAM Role for ECSTaskExecutionRole
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-ECSTaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: access-secrets-ssm
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-ECSTaskExecutionRole"
        - Key: lab
          Value: !Sub "${ProjectTag}"

  # IAM Role for ECSTask
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-ECSTaskRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub "${AWS::AccountId}"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:ecs:eu-central-1:${AWS::AccountId}:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
      Policies:
        - PolicyName: AccessSecretsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ECSTaskRole
        - Key: lab
          Value: !Sub "${ProjectTag}"

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}ECSAutoScalingRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AppName}-ecs-service-autoscaling-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${AppName}ECSAutoScalingRole
        - Key: lab
          Value: !Sub '${ProjectTag}'

  # CodeConnectionsActionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Action: sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:*
  #       Version: "2012-10-17"
  
  # CodeConnectionsActionDefaultPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyDocument:
  #       Statement:
  #         - Action: codestar-connections:UseConnection
  #           Effect: Allow
  #           Resource: !Ref ConnectionArn
  #         - Action:
  #             - s3:Abort*
  #             - s3:DeleteObject*
  #             - s3:GetBucket*
  #             - s3:GetObject*
  #             - s3:List*
  #             - s3:PutObject
  #             - s3:PutObjectLegalHold
  #             - s3:PutObjectRetention
  #             - s3:PutObjectTagging
  #             - s3:PutObjectVersionTagging
  #           Effect: Allow
  #           Resource:
  #             - !Sub ${PipelineArtifactBucketArn}
  #             - !Sub ${PipelineArtifactBucketArn}/*
  #         - Action:
  #             - s3:PutObjectAcl
  #             - s3:PutObjectVersionAcl
  #           Effect: Allow
  #           Resource: 
  #             - !Sub ${PipelineArtifactBucketArn}
  #             - !Sub ${PipelineArtifactBucketArn}/*
  #       Version: "2012-10-17"
  #     PolicyName: CodeConnectionsActionDefaultPolicy
  #     Roles:
  #       - !Ref CodeConnectionsActionRole  


Outputs:
  EventBridgeRoleArn: { Value: !GetAtt EventBridgeRole.Arn }
  ECSTaskRoleArn: { Value: !GetAtt ECSTaskRole.Arn }
  ECSTaskExecutionRoleArn: { Value: !GetAtt ECSTaskExecutionRole.Arn }
  # CodeConnectionsActionRoleArn: { Value: !GetAtt CodeConnectionsActionRole.Arn }
  CodePipelineRoleArn: { Value: !GetAtt CodePipelineRole.Arn }
  AutoScalingRoleArn: { Value: !GetAtt AutoScalingRole.Arn }
  CodeDeployRoleArn: { Value: !GetAtt CodeDeployRole.Arn }
